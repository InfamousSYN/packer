---

name: packer-kali-virtualbox

on:
  #schedule:
  #  - cron: '15 02 * * 0'
  push:
    paths:
      - '.github/workflows/packer-kali-virtualbox.yml'
jobs:
  valdiate_template:
    runs-on: ubuntu-latest
    name: valdiate_template_packer

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      # install packer
      - name: Install Packer
        run: |
          sudo curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get -y install packer
          sudo dpkg-reconfigure packer
          sudo ldconfig

      # fix backwards incompatibilities in template
      - name: Fix Template
        run: sudo packer fix templates/kali.json

      # validate templates
      - name: Validate Template
        run: |
          sudo packer validate -only=virtualbox-iso \
            -var iso_url="http://cdimage.kali.org/kali-images/kali-weekly/$( curl http://cdimage.kali.org/kali-images/kali-weekly/ |grep -oE 'kali-linux-[0-9]{1,4}-W[0-9]{1,2}-installer-amd64.iso'| head -n 1 )"  \
            -var iso_checksum="file:http://cdimage.kali.org/kali-images/kali-weekly/SHA256SUMS" \
            -var account_name=${{ secrets.VAGRANTCLOUD_USERNAME }} -var account_key=${{ secrets.VAGRANTCLOUD_API }} \
            -var box_version=1.0.0 -var metadata=include/vagrant/metadta/virtualbox/metadata.json \
            -var vagrantfile=include/vagrant/Vagrantfile/virtualbox/linux/Vagrantfile \
            templates/kali.json

  builder:
    runs-on: ubuntu-latest
    needs: valdiate_template
    name: builder
    
    steps:
      - name: install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: provision droplet
        run: |
          doctl \
           compute \
           droplet \
           create ${{ env.name }} \
           --size ${{ env.size_slug }} \
           --image ${{ env.image_slug }} \
           --ssh-keys ${{ secrets.DIGITIALOCEANS_SSH_KEY_FINGERPRINT }} \
           --region ${{ env.region_slug }} \
           --tag-names ${{ env.tags }}
        env:
          name: 'github-actions-packer'
          size_slug: 's-1vcpu-2gb'
          image_slug: 'ubuntu-20-04-x64'
          region_slug: 'nyc1'
          tags: 'github_actions,packer'

      - name: set instance id environment variable
        run: |
          echo DROPLET_ID=$( doctl compute droplet list --tag-name github_actions --output json | grep -E '^(\s){4}\"id\"' | awk '{$1=$1};1' |cut -d ' ' -f2 | cut -d ',' -f1 ) >> $GITHUB_ENV

      - name: wait 60
        run: |
          sleep 60

      - name: jq set DROPLET_IP
        uses: sergeysova/jq-action@v2
        with:
          cmd: echo DROPLET_IP=$( doctl compute droplet get ${{ env.DROPLET_ID }} --output json | jq '.[0].networks.v4[0].ip_address' ) >> $GITHUB_ENV

      - name: connect to droplet for first time
        run: |
          echo "${{ secrets.DIGITIALOCEANS_SSH_KEY }}" >> ${{ env.DROPLET_ID }}.pem
          chmod 600 ${{ env.DROPLET_ID }}.pem
          ssh \
           -l root \
           ${{ env.DROPLET_IP }} \
           -o "StrictHostKeyChecking=no" \
           -i ${{ env.DROPLET_ID }}.pem

      - name: configure droplet
        run: |
          doctl compute ssh ${{ env.DROPLET_ID }} --ssh-key-path ${{ env.DROPLET_ID }}.pem \
           --ssh-command "whoami; exit"

      - name: decommission droplet
        run: |
          sleep 3

      # additional steps to process artifacts
