---

name: packer-kali-virtualbox

on:
  #schedule:
  #  - cron: '15 02 * * 0'
  push:
    paths:
      - '.github/workflows/packer-kali-virtualbox.yml'
jobs:
  valdiate_template:
    runs-on: ubuntu-latest
    name: valdiate_template_packer

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      # install packer
      - name: Install Packer
        run: |
          sudo curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get -y install packer
          sudo dpkg-reconfigure packer
          sudo ldconfig

      # download iso
      - name: Download ISO
        run: |
          curl http://cdimage.kali.org/kali-images/kali-weekly/ |grep -oE 'kali-linux-[0-9]{1,4}-W[0-9]{1,2}-installer-amd64.iso'| head -n 1 > target_iso.lst
          curl -L http://cdimage.kali.org/kali-images/kali-weekly/$(cat target_iso.lst) --output $(cat target_iso.lst)
          file $(cat target_iso.lst)
          sudo apt -y install coreutils

      # fix backwards incompatibilities in template
      - name: Fix Template
        run: sudo packer fix templates/kali.json

      # validate templates
      - name: Validate Template
        run: |
          sudo packer validate -only=virtualbox-iso -var iso_url=$(cat target_iso.lst) \
          -var iso_checksum=$(sha256sum $(cat target_iso.lst) | cut -d " " -f 1) \
          -var account_name=${{ secrets.VAGRANTCLOUD_USERNAME }} -var account_key=${{ secrets.VAGRANTCLOUD_API }} \
          -var box_version=1.0.0 -var metadata=include/vagrant/metadta/virtualbox/metadata.json \
          -var vagrantfile=include/vagrant/Vagrantfile/virtualbox/linux/Vagrantfile templates/kali.json

      # fix backwards incompatibilities in template
#      - name: Fix Template
#        uses: hashicorp/packer-github-actions@master
#        with:
#          command: fix
#          target: templates/kali.json

      # validate templates
 #     - name: Validate Template
 #       uses: hashicorp/packer-github-actions@master
 #       with:
 #         command: validate
 #         arguments: -syntax-only
 #         target: templates/kali.json

  builder:
    runs-on: ubuntu-latest
    needs: valdiate_template
    name: aws_builder
    
    steps:
      # Log into AWS Console
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Save github action key
      - name: Save github action key
        run: |
          echo "${{ secrets.AWS_EC2_INSTANCE_KEY }}" >> github_actions.pem
          sudo chmod 600 github_actions.pem

      # Create instance using AWS Console
      # ami-0b7dcd6e6fd797935
      - name: Create instance
        run: |
          export AWS_SECURITY_GROUP_ID=`aws ec2 create-security-group --group-name GithubActionsPacker --description "Bespoke security group to grant access from github action runner to instance" | grep -oE 'sg-.*' | tr -d '"'`
          echo $AWS_SECURITY_GROUP_ID > security_group_id.txt
          aws ec2 authorize-security-group-ingress --group-id $AWS_SECURITY_GROUP_ID --protocol tcp --port 22 --cidr `curl https://checkip.amazonaws.com`/32
          curl https://checkip.amazonaws.com
          aws ec2 run-instances --image-id ${{ secrets.AWS_IMAGE_ID }} --instance-type ${{ secrets.AWS_INSTANCE_TYPE }} --key-name ${{ secrets.AWS_EC2_INSTANCE_NAME }} --security-group-ids $AWS_SECURITY_GROUP_ID --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=GithubActions_Packer_Build}]' |grep InstanceId |cut -d ":" -f2 | tr -d '"' | tr -d ',' | grep -oE 'i-*.*' >> instance_id.txt
          aws ec2 describe-instances --instance-ids $( cat instance_id.txt ) |grep PublicIpAddress | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' >> instance_public_ip.txt

      - name: Pause builder
        run: |
          sleep 60

      - name: Instance Configuration - Install Packer
        run: |
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "sudo curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -"
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "sudo apt-add-repository 'deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main'"
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "sudo apt-get update && sudo apt-get -y install packer"
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "sudo dpkg-reconfigure packer"
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "sudo ldconfig"

      - name: Instance Configuration - Install Virtualbox
        run: |
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "sudo apt update -y"
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "sudo apt-get install -y git bash openssl curl zip linux-headers-generic"
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "sudo add-apt-repository multiverse "
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "curl https://download.virtualbox.org/virtualbox/6.1.34/virtualbox-6.1_6.1.34-150636.1~Ubuntu~eoan_amd64.deb --output virtualbox-6.1_6.1.34-150636.1~Ubuntu~eoan_amd64.deb"
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "sudo apt install -y libqt5core5a libqt5gui5 libqt5opengl5 libqt5printsupport5 libqt5widgets5 libqt5x11extras5 libsdl1.2debian libopus0 virtualbox-guest-x11"
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "sudo dpkg -i ./virtualbox-6.1_6.1.34-150636.1~Ubuntu~eoan_amd64.deb"
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "sudo apt-get update -y"
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "curl https://download.virtualbox.org/virtualbox/6.1.34/Oracle_VM_VirtualBox_Extension_Pack-6.1.34.vbox-extpack --output Oracle_VM_VirtualBox_Extension_Pack-6.1.34.vbox-extpack"
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "echo 'y' | sudo vboxmanage extpack install ./Oracle_VM_VirtualBox_Extension_Pack-6.1.34.vbox-extpack"

      # download iso
      - name: Instance Configuration - Downloading ISO
        run: |
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "sudo apt -y install coreutils"
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "curl http://cdimage.kali.org/kali-images/kali-weekly/ |grep -oE 'kali-linux-[0-9]{1,4}-W[0-9]{1,2}-installer-amd64.iso'| head -n 1 > target_iso.lst;\
           curl -L http://cdimage.kali.org/kali-images/kali-weekly/$(cat target_iso.lst) --output $(cat target_iso.lst);\
           file $(cat target_iso.lst)"
#          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "cat /home/ubuntu/target_iso.lst"
#          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "curl -L http://cdimage.kali.org/kali-images/kali-weekly/$(cat /home/ubuntu/target_iso.lst) --output $(cat /home/ubuntu/target_iso.lst)"
#          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "file $(cat /home/ubuntu/target_iso.lst)"

      - name: Instance Configuration - Checkout packer repo
        run: |
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "git clone https://github.com/InfamousSYN/packer"

      - name: Instance Packer - Fix Template
        run: |
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "cd packer; sudo packer fix templates/kali.json"

      - name: Instance Packer - Validate Template
        run: |
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "cd packer; sudo packer validate -only=virtualbox-iso -var iso_url=$(cat ../target_iso.lst) \
          -var iso_checksum=$(sha256sum $(cat ../target_iso.lst) | cut -d " " -f 1) \
          -var account_name=${{ secrets.VAGRANTCLOUD_USERNAME }} -var account_key=${{ secrets.VAGRANTCLOUD_API }} \
          -var box_version=1.0.0 -var metadata=include/vagrant/metadta/virtualbox/metadata.json \
          -var vagrantfile=include/vagrant/Vagrantfile/virtualbox/linux/Vagrantfile templates/kali.json"

      - name: Instance Packer - Build Image
        run: |
          ssh -l ubuntu `cat instance_public_ip.txt` -o "StrictHostKeyChecking=no" -i github_actions.pem "cd packer; sudo PACKER_LOG=1 packer build -color=false -on-error=abort -only=virtualbox-iso -var iso_url=$(cat ../target_iso.lst) \
          -var iso_checksum=$(sha256sum $(cat ../target_iso.lst) | cut -d " " -f 1) \
          -var account_name=${{ secrets.VAGRANTCLOUD_USERNAME }} -var account_key=${{ secrets.VAGRANTCLOUD_API }} \
          -var box_version=1.0.0 -var metadata=include/vagrant/metadta/virtualbox/metadata.json \
          -var vagrantfile=include/vagrant/Vagrantfile/virtualbox/linux/Vagrantfile templates/kali.json"

      # Terminate instance
      - name: Terminate instance
        run: | 
          aws ec2 terminate-instances --instance-ids $( cat instance_id.txt )

      - name: Pause builder
        run: |
          sleep 60

      - name: Delete Security Group
        run: |
          aws ec2 delete-security-group --group-id $( cat security_group_id.txt )

       # build artifact
#      - name: Build Artifact
#        uses: hashicorp/packer-github-actions@master

#        with:
#          command: build
#          arguments: |
#            -color=false
#            -on-error=abort
#            -only=virtualbox-iso
#            -var iso_url=https://cdimage.kali.org/kali-images/kali-weekly/kali-linux-2022-W16-installer-amd64.iso
#            -var iso_checksum=eface812076f925f59c448596894b11075bf40212752f704ad333998c9c28d9f
#            -var account_name=${{ secrets.VAGRANTCLOUD_USERNAME }}
#            -var account_key=${{ secrets.VAGRANTCLOUD_API }}
#            -var box_version=1.0.0
#            -var metadata=include/vagrant/metadta/virtualbox/metadata.json
#            -var vagrantfile=include/vagrant/Vagrantfile/virtualbox/linux/Vagrantfile
#          target: templates/kali.json
#        env:
#          PACKER_LOG: 1

      # build artifact
#      - name: Build Artifact
#        run: |
#          sudo PACKER_LOG=1 packer build -color=false -on-error=abort -only=virtualbox-iso -var iso_url=$(cat target_iso.lst) -var iso_checksum=$(sha256sum $(cat target_iso.lst) | cut -d " " -f 1) -var account_name=${{ secrets.VAGRANTCLOUD_USERNAME }} -var account_key=${{ secrets.VAGRANTCLOUD_API }} -var box_version=1.0.0 -var metadata=include/vagrant/metadta/virtualbox/metadata.json -var vagrantfile=include/vagrant/Vagrantfile/virtualbox/linux/Vagrantfile templates/kali.json

      # additional steps to process artifacts
